pipeline {
  agent any

  // limite la verbosit√© du wrapper pour √©viter les timeouts
  options {
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }

  // injecte votre token SonarCloud depuis les Credentials Jenkins
  environment {
    SONAR_TOKEN = credentials('sonarcloud-token')
  }

  stages {

    stage('Checkout') {
      steps {
        // clone via SSH avec la Deploy Key enregistr√©e sous l'ID github-deploy-key
        git url:      'git@github.com:Marouanne13/pfa-netjwt-angular.git',
            credentialsId: 'github-deploy-key',
            branch:       'main'
      }
    }

    stage('SonarCloud: begin analysis') {
      steps {
        // withSonarQubeEnv('sonarcloud') doit correspondre √† l'instance SonarQube nomm√©e "sonarcloud"
        withSonarQubeEnv('sonarcloud') {
          // installe le scanner si besoin (quiet)
          sh 'dotnet tool install --global dotnet-sonarscanner --version 5.12.0 --verbosity quiet || true'
          // d√©marre l‚Äôanalyse
          sh '''
            dotnet sonarscanner begin \
              /k:"Marouanne13_pfa-netjwt-angular" \
              /o:"Marouanne13" \
              /d:sonar.login=$SONAR_TOKEN
          '''
        }
      }
    }

    stage('Restore') {
      steps {
        sh 'dotnet restore PFA.sln --verbosity minimal'
      }
    }

    stage('Build') {
      steps {
        sh 'dotnet build PFA.sln --no-restore --verbosity minimal'
      }
    }

    stage('Test') {
      steps {
        sh 'dotnet test PFA.sln --no-build --verbosity minimal'
      }
    }

    stage('SonarCloud: end analysis') {
      steps {
        // cl√¥t l‚Äôanalyse et envoie les r√©sultats √† SonarCloud
        sh 'dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN'
      }
    }
  }

  post {
    success {
      echo 'üéâ Build, tests et analyse SonarCloud r√©ussis¬†!'
    }
    failure {
      echo '‚ùå √âchec de la pipeline, v√©rifiez les logs Jenkins et le Quality Gate SonarCloud.'
    }
  }
}
